type Item {
  name: String
  number: Int
  length: Float
  width: Float
  height: Float
}

input ItemInput {
  name: String
  number: Int
  length: Float
  width: Float
  height: Float
}

input RequestHaulSearchInput {
  origin: String!
  destination: String!
  date: GQLDate!
  vehicleType: String!
}

type HaulPost {
  id: Int
  origin: String
  destination: String
  date: GQLDate
  items: [Item]
  time: String
  vehicleType: String
  shared: Boolean
  seat: Boolean
  message: String
  created: GQLDate
}

input InputHaulPost {
  id: Int
  origin: String!
  destination: String!
  date: GQLDate!
  items: [ItemInput]
  time: String
  vehicleType: String
  shared: Boolean
  message: String
  seat: Boolean
}

type RequestHaul {
  id: Int!
  origin: String!
  destination: String!
  date: GQLDate!
  vehicleType: String!
  time: String!
  driverName: String!
  driverId: String!
  vehicleCapacity: Int!
  vehicleDimension: String!
  shared: Boolean!
  seat: Boolean!
  budget: Float!
  vehiclePlateNumber: String!
  created: GQLDate!
  message: String
}

input CreateRequestHaulInput {
  origin: String!
  destination: String!
  driverName: String!
  driverId: String!
  vehicleCapacity: Int!
  vehicleDimension: String!
  vehicleType: String!
  vehiclePlateNumber: String!
  shared: Boolean!
  seat: Boolean!
  budget: Float!
  time: String!
  date: GQLDate!
  message: String
}

type Query {
  getHaulPosts: [HaulPost!]!
  getHaulPostByID(id: Int!): HaulPost!

  getRequestHauls: [RequestHaul]!
  getRequestHaulById(id: Int!): RequestHaul
  getRequestHaulByFilter(haul: RequestHaulSearchInput): [RequestHaul]!
}

type Mutation {
  createHaulPost(haulPost: InputHaulPost!): HaulPost
  removeHaulPost(id: Int!): HaulPost

  createRequestHaul(haul: CreateRequestHaulInput!): RequestHaul!
  deleteRequestHaul(id: Int!): RequestHaul
}

scalar GQLDate
